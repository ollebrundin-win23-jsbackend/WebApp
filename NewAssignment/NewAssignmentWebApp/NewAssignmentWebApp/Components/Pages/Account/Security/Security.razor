@page "/Account/Security"
@using Microsoft.AspNetCore.Authorization

@inject UserRepo UserRepo
@inject AddressRepo AddressRepo
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject AuthenticationStateProvider AuthState
@inject NavigationManager NavigationManager

@attribute [Authorize]

<PageTitle>Account Security</PageTitle>


<main>
    @if (userEntity != null)
    {
        <AccountSidebar FirstName=@userEntity!.FirstName LastName=@userEntity.LastName Email=@userEntity.Email />
    }

    else
    {
        <AccountSidebar FirstName="" LastName="" Email="" />
    }
    <section class="security">
        <h1>Security</h1>
        <div id="password-form" class="password-form">
            <h3>Password</h3>
            <EditForm Model="PasswordModel" method="post" OnValidSubmit="PasswordSubmit" FormName="password-form" novalidate>
                <DataAnnotationsValidator />
                <label for="current-password">Current password</label>
                <InputText @bind-Value="PasswordModel.CurrentPassword" type="password" class="text-input" id="current-password" aria-required="true" placeholder="********" />
                <ValidationMessage For="() => PasswordModel.CurrentPassword" />
                <div class="double-input-container">
                    <div>
                        <label for="new-password">New password</label>
                        <InputText @bind-Value="PasswordModel.NewPassword" type="password" class="text-input" id="new-password" aria-required="true" placeholder="********" />
                        <ValidationMessage For="() => PasswordModel.NewPassword" />
                    </div>
                    <div>
                        <label for="confirm-new-password">Confirm new password</label>
                        <InputText @bind-Value="PasswordModel.ConfirmNewPassword" type="password" class="text-input" id="confirm-new-password" aria-required="true" placeholder="********" />
                        <ValidationMessage For="() => PasswordModel.ConfirmNewPassword" />
                    </div>
                </div>
                <p class="error-message">
                    @passwordErrorMessage
                </p>
                <p class="success-message">
                    @passwordSuccessMessage
                </p>
                <div class="btn-container">
                    <a class="btn light" href="/Account/Security">Cancel</a>
                    <button type="submit" class="btn">Change password</button>
                </div>
            </EditForm>
        </div>
        <div id="delete-form" class="delete-form">
            <h3>Delete account</h3>
            <p>When you delete your account, your public profile will be deactivated immediately. If you change your mind before the 14 days are up, sign in with your email and password, and we'll send you a link to reactivate your account.</p>
            <EditForm Model="DeleteModel" method="post" OnValidSubmit="DeleteSubmit" FormName="delete-form" novalidate>
                <DataAnnotationsValidator />
                <InputCheckbox @bind-Value="DeleteModel.ConfirmDelete" id="confirm-delete" aria-required="true" />
                <label for="confirm-delete">Yes, I want to delete my account.</label>
                <ValidationMessage For="() => DeleteModel.ConfirmDelete" />
                <InputText @bind-Value="DeleteModel.AvoidBug" type="text" id="avoid-bug" aria-required="false" hidden /> @* En bugg i Blazor gör att formuläret inte funkar om man bara har en checkbox och inget annat, enligt vad jag har förstått. *@
                <p class="error-message">
                    @deleteErrorMessage
                </p>
                <div class="btn-container">
                    <button type="submit" class="btn">Delete</button>
                </div>
            </EditForm>
        </div>
    </section>
</main>

@code {
    private AuthenticationState? authState;
    private ClaimsPrincipal? userClaims;
    private ApplicationUser? userEntity;

    protected override async Task OnInitializedAsync()
    {
        authState = await AuthState.GetAuthenticationStateAsync(); //Hämta ut den nuvarande användarens authentication state
        userClaims = authState.User; //Hämta användarinformationen

        userEntity = await UserRepo.GetOneAsync(x => x.UserName == userClaims.Identity!.Name);

        if (userEntity == null) //Detta behövs nog inte, men har som en extra säkerhetsåtgärd
        {
            await SignInManager.SignOutAsync();
            NavigationManager.NavigateTo("/Account/SignIn"); 
        }
    }

    [SupplyParameterFromForm(FormName = "password-form")]
    private PasswordFormModel PasswordModel { get; set; } = new PasswordFormModel();

    [SupplyParameterFromForm(FormName = "delete-form")]
    private DeleteFormModel DeleteModel { get; set; } = new DeleteFormModel();

    private string? passwordErrorMessage;
    private string? passwordSuccessMessage;
    private string? deleteErrorMessage;

    public async Task PasswordSubmit(EditContext editContext)
    {
        var result = await UserManager.ChangePasswordAsync(userEntity!, PasswordModel.CurrentPassword, PasswordModel.NewPassword);

        if (result.Succeeded)
        {
            passwordSuccessMessage = "Password updated!";

            PasswordModel.CurrentPassword = ""; //Återställ formuläret
            PasswordModel.NewPassword = "";
            PasswordModel.ConfirmNewPassword = "";
        }

        else
        {
            passwordErrorMessage = "Something went wrong.";
        }
    }

    public async Task DeleteSubmit(EditContext editContext)
    {
        var result = await UserManager.DeleteAsync(userEntity!);
        await AddressRepo.DeleteAsync(x => x.Id == userEntity!.AddressId); //Om användaren inte har någon address får man false tillbaka, vilket innebär att jag inte gör nån "false check" här. Tekniskt sett kan det även innebära att något gick snett. Så i verkliga scenarion bör man kanske göra någon extra check i en address service eller liknande

        if (result.Succeeded)
        {
            await SignInManager.SignOutAsync();
            NavigationManager.NavigateTo("/Account/SignUp");
        }

        else
        {
            deleteErrorMessage = "Something went wrong.";
        }
    }
}
