@page "/Account/SignUp"
@inject UserManager<ApplicationUser> UserManager
@inject ApplicationDbContext Context
@inject NavigationManager NavigationManager

<PageTitle>Sign Up</PageTitle>

<AuthorizeView Context="authContext">
    <Authorized>
        <RedirectToAccountPage />
    </Authorized>
    <NotAuthorized>
        <section id="sign-up" class="sign-up">
            <h1>Create Account</h1>
            <p class="sign-in-here">Already have an account? <a href="/Account/SignIn">Sign in here.</a></p>
            <EditForm Model="Model" method="post" OnValidSubmit="SignUpUser" FormName="sign-up" novalidate>
                <DataAnnotationsValidator />
                <div class="name-container">
                    <div>
                        <label for="first-name">First name</label>
                        <InputText @bind-Value="Model.FirstName" class="text-input" id="first-name" aria-required="true" placeholder="First name" />
                        <ValidationMessage For="() => Model.FirstName" />
                    </div>
                    <div>
                        <label for="last-name">Last name</label>
                        <InputText @bind-Value="Model.LastName" class="text-input" id="last-name" aria-required="true" placeholder="Last name" />
                        <ValidationMessage For="() => Model.LastName" />
                    </div>
                </div>
                <label for="email">Email</label>
                <InputText @bind-Value="Model.Email" type="email" class="text-input" id="email" aria-required="true" placeholder="user@domain.com" />
                <ValidationMessage For="() => Model.Email" />
                <label for="password">Password</label>
                <InputText @bind-Value="Model.Password" type="password" class="text-input" id="password" aria-required="true" placeholder="********" />
                <ValidationMessage For="() => Model.Password" />
                <label for="confirm-password">Confirm password</label>
                <InputText @bind-Value="Model.ConfirmPassword" type="password" class="text-input" id="confirm-password" aria-required="true" placeholder="********" />
                <ValidationMessage For="() => Model.ConfirmPassword" />
                <p class="error-message">
                    @errorMessage
                </p>
                <button type="submit" class="btn">Sign up</button>
            </EditForm>
        </section>
    </NotAuthorized>
</AuthorizeView>

@code{
    [SupplyParameterFromForm]
    private SignUpModel Model { get; set; } = new SignUpModel();

    private string? errorMessage;

    public async Task SignUpUser(EditContext editContext)
    {
        var userAlreadyExists = Context.Users.Any(x => x.Email == Model.Email);

        if (userAlreadyExists)
        {
            errorMessage = "A user with that email already exists.";
            return;
        }

        var user = new ApplicationUser()
            {
                FirstName = Model.FirstName,
                LastName = Model.LastName,
                Email = Model.Email,
                UserName = Model.Email
            };

        var result = await UserManager.CreateAsync(user, Model.Password);

        if (!result.Succeeded)
        {
            errorMessage = "Something went wrong.";
            return;
        }

        NavigationManager.NavigateTo("/Account/SignIn", true);
    }
}
