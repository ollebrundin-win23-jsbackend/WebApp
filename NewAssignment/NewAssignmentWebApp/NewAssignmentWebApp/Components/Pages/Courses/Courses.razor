@inject HttpClient HttpClient
@inject IConfiguration Configuration

@page "/Courses"
@using System.Text.Json
@using Newtonsoft.Json

<PageTitle>Course</PageTitle>

<section class="courses">
    <div class="breadcrumbs">
        <i class="fa-regular fa-house"></i>
        <a href="/">Home</a>
        <i class="fa-regular fa-chevrons-right"></i>
        <p>Courses</p>
    </div>
    <div class="heading-and-categories">
        <h1>Courses</h1>
        <div class="inputs">
        </div>
    </div>
    <div id="courses-grid" class="courses-grid">
        @if (CourseList != null)
        {
            foreach (var course in CourseList)
            {
                <div class="grid-container">

                    @if (course.IsBestSeller)
                    {
                        <div class="best-seller">Best Seller</div>
                    }

                    <img src="@course.ImageUrl" alt=@course.Title>
                    <a href="/SinglCourse/@course.Id" class="content-container">
                        <h3>@course.Title</h3>
                        <p class="author">By @course.Author</p>

                        @if (course.DiscountedPrice != null)
                        {
                            <p class="discounted-price">$@course.DiscountedPrice <span>$@course.Price</span></p>
                        }

                        else
                        {
                            <p class="price">$@course.Price</p>
                        }
                        <div>
                            <i class="fa-regular fa-clock"></i>
                            <p>@course.Hours hours</p>
                            <i class="fa-regular fa-thumbs-up"></i>

                            @if (course.LikePercentage != null && course.Likes != null)
                            {
                                <p>@course.LikePercentage% (@(course.Likes / 1000)K)</p>
                            }

                        </div>
                    </a>
                </div>
            }
        }
    </div>
</section>

@code {
    private IEnumerable<CourseCardModel>? CourseList { get; set; } = new List<CourseCardModel>();

    protected override async Task OnInitializedAsync()
    {
        //HttpContent i form av StringContent skapas, som innehåller vår query med alla properties vi vill hämta. Den postas även som en application/json för att det ska hanteras på rätt sätt (om man bara postar som en vanlig sträng får man 404 not found)
        var query =  new StringContent("{\"query\":\"query{getAllCourses{id title author price discountedPrice hours likes likePercentage isBestSeller imageUrl } }\"}", System.Text.Encoding.UTF8, "application/json");

        var response = await HttpClient.PostAsync(Configuration.GetValue<string>("GraphQLUrl"), query); //Vi gör en POST request till vårt GraphQL API
        if (response.IsSuccessStatusCode)
        {
            //I verkliga scenarion bör man kanske kolla så att resultatet inte innehåller något errors objekt, men nu skippar jag det
            var result = await response.Content.ReadFromJsonAsync<JsonElement>(); //Innehållet i responsen läses ut från en Json sträng till ett JsonElement, som tillåter oss att köra GetProperty nedan
            var courseListJson = result.GetProperty("data").GetProperty("getAllCourses").ToString(); //Här kan vi alltså hämta properties från Json objektet vilket är smidigt i detta fallet, då vi får tillbaka ett "data" objekt som innehåller ett "getAllCourses" objekt, som i sin tur innehåller själva objektet vi faktiskt vill hämta ut.
            CourseList = JsonConvert.DeserializeObject<IEnumerable<CourseCardModel>>(courseListJson); //Slutligen gör vi om strängen (eftersom vi körde ToString) till vår CourseCard model.
        }
    }
}
